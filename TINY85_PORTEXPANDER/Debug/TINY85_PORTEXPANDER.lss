
TINY85_PORTEXPANDER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000045c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000045c  000004f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080006e  0080006e  000004fe  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000500  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000c63  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a8  00000000  00000000  00000c92  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000009f5  00000000  00000000  00000d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000321  00000000  00000000  0000172f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000412  00000000  00000000  00001a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00001e64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000273  00000000  00000000  00002024  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000004cf  00000000  00000000  00002297  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000088  00000000  00000000  00002766  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	29 c0       	rjmp	.+82     	; 0x68 <__vector_10>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ec e5       	ldi	r30, 0x5C	; 92
  32:	f4 e0       	ldi	r31, 0x04	; 4
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	ae 36       	cpi	r26, 0x6E	; 110
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	ae e6       	ldi	r26, 0x6E	; 110
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a8 37       	cpi	r26, 0x78	; 120
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	ac d0       	rcall	.+344    	; 0x1aa <main>
  52:	02 c2       	rjmp	.+1028   	; 0x458 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <init_TIMER0>:



void init_TIMER0( void )
{
	TCCR0A = 0x02; // CTC (clear timer on compare match) mode only WGM01 is set --> TOP = OCRA, TOV=0xFF (overflow)
  56:	82 e0       	ldi	r24, 0x02	; 2
  58:	8a bd       	out	0x2a, r24	; 42
	TCCR0B = 0x03; // CS01 + CS00 is set prescaler = 64 --> F_CPU/64 = 250 kHz
  5a:	83 e0       	ldi	r24, 0x03	; 3
  5c:	83 bf       	out	0x33, r24	; 51
	OCR0A = 250; // --> 1 kHz --> 1ms timebase for output compare interrupt
  5e:	8a ef       	ldi	r24, 0xFA	; 250
  60:	89 bd       	out	0x29, r24	; 41
	TIMSK = 0x10; // Output compare match A interrupt enable is set
  62:	80 e1       	ldi	r24, 0x10	; 16
  64:	89 bf       	out	0x39, r24	; 57
  66:	08 95       	ret

00000068 <__vector_10>:

volatile char kit_light = 0;

// ISR is executed every 1ms
ISR(TIMER0_COMPA_vect)
{
  68:	1f 92       	push	r1
  6a:	0f 92       	push	r0
  6c:	0f b6       	in	r0, 0x3f	; 63
  6e:	0f 92       	push	r0
  70:	11 24       	eor	r1, r1
  72:	2f 93       	push	r18
  74:	8f 93       	push	r24
  76:	9f 93       	push	r25
	if( !tb_10ms_flag )tic_time_10ms++;
  78:	80 91 76 00 	lds	r24, 0x0076
  7c:	81 11       	cpse	r24, r1
  7e:	09 c0       	rjmp	.+18     	; 0x92 <__vector_10+0x2a>
  80:	80 91 72 00 	lds	r24, 0x0072
  84:	90 91 73 00 	lds	r25, 0x0073
  88:	01 96       	adiw	r24, 0x01	; 1
  8a:	90 93 73 00 	sts	0x0073, r25
  8e:	80 93 72 00 	sts	0x0072, r24
	if( !tb_500ms_flag )tic_time_500ms++;
  92:	80 91 77 00 	lds	r24, 0x0077
  96:	81 11       	cpse	r24, r1
  98:	09 c0       	rjmp	.+18     	; 0xac <__vector_10+0x44>
  9a:	80 91 74 00 	lds	r24, 0x0074
  9e:	90 91 75 00 	lds	r25, 0x0075
  a2:	01 96       	adiw	r24, 0x01	; 1
  a4:	90 93 75 00 	sts	0x0075, r25
  a8:	80 93 74 00 	sts	0x0074, r24
	if ( tic_time_500ms > 500 )
  ac:	80 91 74 00 	lds	r24, 0x0074
  b0:	90 91 75 00 	lds	r25, 0x0075
  b4:	85 3f       	cpi	r24, 0xF5	; 245
  b6:	91 40       	sbci	r25, 0x01	; 1
  b8:	18 f0       	brcs	.+6      	; 0xc0 <__vector_10+0x58>
	{
		tb_500ms_flag = 1;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	80 93 77 00 	sts	0x0077, r24
	}
	if ( tic_time_10ms > 200 )
  c0:	80 91 72 00 	lds	r24, 0x0072
  c4:	90 91 73 00 	lds	r25, 0x0073
  c8:	89 3c       	cpi	r24, 0xC9	; 201
  ca:	91 05       	cpc	r25, r1
  cc:	18 f0       	brcs	.+6      	; 0xd4 <__vector_10+0x6c>
	{
		tb_10ms_flag = 1;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 76 00 	sts	0x0076, r24
	}
}
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	2f 91       	pop	r18
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <UC121902_refresh_screen>:
#define UC121902_DATA 2



void UC121902_refresh_screen(void)
{
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
	PX_readSetWrite( UC121902_PORT , ( 1 << UC121902_CS ) );  // CS high
  ec:	61 e0       	ldi	r22, 0x01	; 1
  ee:	82 e1       	ldi	r24, 0x12	; 18
  f0:	7f d1       	rcall	.+766    	; 0x3f0 <PX_readSetWrite>
	
	for (i = 0 ; i < 14 ; i++ )
  f2:	10 92 6f 00 	sts	0x006F, r1
		
		for ( j = 0 ; j < 8 ; j ++)
		{
			PX_readClearWrite( UC121902_PORT , ( 1 << UC121902_CLK ) );  // CLK low
			
			if ( ( UC121902_buffer[i] & ( 1 << ( 7 - j ) ) ) >> ( 7 - j ) )
  f6:	c7 e0       	ldi	r28, 0x07	; 7
  f8:	d0 e0       	ldi	r29, 0x00	; 0
  fa:	01 e0       	ldi	r16, 0x01	; 1
  fc:	10 e0       	ldi	r17, 0x00	; 0

void UC121902_refresh_screen(void)
{
	PX_readSetWrite( UC121902_PORT , ( 1 << UC121902_CS ) );  // CS high
	
	for (i = 0 ; i < 14 ; i++ )
  fe:	49 c0       	rjmp	.+146    	; 0x192 <UC121902_refresh_screen+0xae>
	{
		
		for ( j = 0 ; j < 8 ; j ++)
 100:	10 92 6e 00 	sts	0x006E, r1
 104:	2d c0       	rjmp	.+90     	; 0x160 <UC121902_refresh_screen+0x7c>
		{
			PX_readClearWrite( UC121902_PORT , ( 1 << UC121902_CLK ) );  // CLK low
 106:	62 e0       	ldi	r22, 0x02	; 2
 108:	82 e1       	ldi	r24, 0x12	; 18
 10a:	83 d1       	rcall	.+774    	; 0x412 <PX_readClearWrite>
			
			if ( ( UC121902_buffer[i] & ( 1 << ( 7 - j ) ) ) >> ( 7 - j ) )
 10c:	80 91 6e 00 	lds	r24, 0x006E
 110:	9e 01       	movw	r18, r28
 112:	28 1b       	sub	r18, r24
 114:	31 09       	sbc	r19, r1
 116:	c8 01       	movw	r24, r16
 118:	02 2e       	mov	r0, r18
 11a:	02 c0       	rjmp	.+4      	; 0x120 <UC121902_refresh_screen+0x3c>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	0a 94       	dec	r0
 122:	e2 f7       	brpl	.-8      	; 0x11c <UC121902_refresh_screen+0x38>
 124:	e0 91 6f 00 	lds	r30, 0x006F
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	e0 5a       	subi	r30, 0xA0	; 160
 12c:	ff 4f       	sbci	r31, 0xFF	; 255
 12e:	40 81       	ld	r20, Z
 130:	50 e0       	ldi	r21, 0x00	; 0
 132:	84 23       	and	r24, r20
 134:	95 23       	and	r25, r21
 136:	02 c0       	rjmp	.+4      	; 0x13c <UC121902_refresh_screen+0x58>
 138:	95 95       	asr	r25
 13a:	87 95       	ror	r24
 13c:	2a 95       	dec	r18
 13e:	e2 f7       	brpl	.-8      	; 0x138 <UC121902_refresh_screen+0x54>
			{
				PX_readSetWrite( UC121902_PORT , ( 1 << UC121902_DATA ) );  // DATA high
 140:	64 e0       	ldi	r22, 0x04	; 4
		
		for ( j = 0 ; j < 8 ; j ++)
		{
			PX_readClearWrite( UC121902_PORT , ( 1 << UC121902_CLK ) );  // CLK low
			
			if ( ( UC121902_buffer[i] & ( 1 << ( 7 - j ) ) ) >> ( 7 - j ) )
 142:	89 2b       	or	r24, r25
 144:	19 f0       	breq	.+6      	; 0x14c <UC121902_refresh_screen+0x68>
			{
				PX_readSetWrite( UC121902_PORT , ( 1 << UC121902_DATA ) );  // DATA high
 146:	82 e1       	ldi	r24, 0x12	; 18
 148:	53 d1       	rcall	.+678    	; 0x3f0 <PX_readSetWrite>
 14a:	02 c0       	rjmp	.+4      	; 0x150 <UC121902_refresh_screen+0x6c>
			}
			else
			{
				PX_readClearWrite( UC121902_PORT , ( 1 << UC121902_DATA ) );  // DATA low
 14c:	82 e1       	ldi	r24, 0x12	; 18
 14e:	61 d1       	rcall	.+706    	; 0x412 <PX_readClearWrite>
			}
			
			
			PX_readSetWrite( UC121902_PORT , ( 1 << UC121902_CLK ) );  // CLK high
 150:	62 e0       	ldi	r22, 0x02	; 2
 152:	82 e1       	ldi	r24, 0x12	; 18
 154:	4d d1       	rcall	.+666    	; 0x3f0 <PX_readSetWrite>
	PX_readSetWrite( UC121902_PORT , ( 1 << UC121902_CS ) );  // CS high
	
	for (i = 0 ; i < 14 ; i++ )
	{
		
		for ( j = 0 ; j < 8 ; j ++)
 156:	80 91 6e 00 	lds	r24, 0x006E
 15a:	8f 5f       	subi	r24, 0xFF	; 255
 15c:	80 93 6e 00 	sts	0x006E, r24
 160:	80 91 6e 00 	lds	r24, 0x006E
 164:	88 30       	cpi	r24, 0x08	; 8
 166:	78 f2       	brcs	.-98     	; 0x106 <UC121902_refresh_screen+0x22>
			
			PX_readSetWrite( UC121902_PORT , ( 1 << UC121902_CLK ) );  // CLK high
		}
		
		
		if ( i == 6 )
 168:	80 91 6f 00 	lds	r24, 0x006F
 16c:	86 30       	cpi	r24, 0x06	; 6
 16e:	61 f4       	brne	.+24     	; 0x188 <UC121902_refresh_screen+0xa4>
		{
			PX_readClearWrite( UC121902_PORT , ( 1 << UC121902_CS ) );  // CS low
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	82 e1       	ldi	r24, 0x12	; 18
 174:	4e d1       	rcall	.+668    	; 0x412 <PX_readClearWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	8f e9       	ldi	r24, 0x9F	; 159
 178:	9f e0       	ldi	r25, 0x0F	; 15
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <UC121902_refresh_screen+0x96>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <UC121902_refresh_screen+0x9c>
 180:	00 00       	nop
			_delay_ms(1);
			PX_readSetWrite( UC121902_PORT , ( 1 << UC121902_CS ) );  // CS high
 182:	61 e0       	ldi	r22, 0x01	; 1
 184:	82 e1       	ldi	r24, 0x12	; 18
 186:	34 d1       	rcall	.+616    	; 0x3f0 <PX_readSetWrite>

void UC121902_refresh_screen(void)
{
	PX_readSetWrite( UC121902_PORT , ( 1 << UC121902_CS ) );  // CS high
	
	for (i = 0 ; i < 14 ; i++ )
 188:	80 91 6f 00 	lds	r24, 0x006F
 18c:	8f 5f       	subi	r24, 0xFF	; 255
 18e:	80 93 6f 00 	sts	0x006F, r24
 192:	80 91 6f 00 	lds	r24, 0x006F
 196:	8e 30       	cpi	r24, 0x0E	; 14
 198:	08 f4       	brcc	.+2      	; 0x19c <UC121902_refresh_screen+0xb8>
 19a:	b2 cf       	rjmp	.-156    	; 0x100 <UC121902_refresh_screen+0x1c>
			PX_readSetWrite( UC121902_PORT , ( 1 << UC121902_CS ) );  // CS high
		}
		
	}
	
	PX_readClearWrite( UC121902_PORT , ( 1 << UC121902_CS ) );  // CS low
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	82 e1       	ldi	r24, 0x12	; 18
}
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
			PX_readSetWrite( UC121902_PORT , ( 1 << UC121902_CS ) );  // CS high
		}
		
	}
	
	PX_readClearWrite( UC121902_PORT , ( 1 << UC121902_CS ) );  // CS low
 1a8:	34 c1       	rjmp	.+616    	; 0x412 <PX_readClearWrite>

000001aa <main>:
}


int main(void)
{
	init_SPI();
 1aa:	79 d0       	rcall	.+242    	; 0x29e <init_SPI>
	PX_reset();
 1ac:	e2 d0       	rcall	.+452    	; 0x372 <PX_reset>
	init_TIMER0();
 1ae:	53 df       	rcall	.-346    	; 0x56 <init_TIMER0>
	sei();
 1b0:	78 94       	sei

	
	PX_writeByte( PX_IODIRA , ( 0xFF & ~( ( 1 << 7 ) + ( 1 << UC121902_DATA ) + ( 1 << UC121902_CLK ) + ( 1 << UC121902_CS ) ) ) ); // set port A7, A2, A1, A0 as output
 1b2:	68 e7       	ldi	r22, 0x78	; 120
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	b3 d0       	rcall	.+358    	; 0x31e <PX_writeByte>

	//PX_writeByte(PX_GPIOA,0x01); 
	
	
	
	PX_writeByte( PX_IODIRB , ( 0xFF & ~( ( 1 << 0 ) + ( 1 << 1 ) + ( 1 << 2 ) + ( 1 << 3 ) ) ) ); // set port B0..3 as output
 1b8:	60 ef       	ldi	r22, 0xF0	; 240
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	b0 d0       	rcall	.+352    	; 0x31e <PX_writeByte>
 1be:	8f e3       	ldi	r24, 0x3F	; 63
 1c0:	9c e9       	ldi	r25, 0x9C	; 156
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <main+0x18>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <main+0x1e>
 1c8:	00 00       	nop
				case 4:
				PX_writeByte( PX_GPIOB , ( 1 << 2 ) );
				break;
				case 5:
				PX_writeByte( PX_GPIOB , ( 1 << 1 ) );
				kit_light = -1;
 1ca:	1f ef       	ldi	r17, 0xFF	; 255
				UC121902_buffer[0] = space;
				UC121902_buffer[1] = space;
				UC121902_buffer[2] = space;
				UC121902_buffer[3] = space;
				
				UC121902_buffer[9] = B;
 1cc:	cf eb       	ldi	r28, 0xBF	; 191
				UC121902_buffer[10] = zero;
 1ce:	d7 eb       	ldi	r29, 0xB7	; 183
		*/
		
		//PX_writeByte( PX_GPIOA, PX_readByte(PX_GPIOB) );
		
		
		if (tb_10ms_flag)
 1d0:	80 91 76 00 	lds	r24, 0x0076
 1d4:	88 23       	and	r24, r24
 1d6:	51 f1       	breq	.+84     	; 0x22c <main+0x82>
		{
			
			switch ( kit_light )
 1d8:	80 91 71 00 	lds	r24, 0x0071
 1dc:	82 30       	cpi	r24, 0x02	; 2
 1de:	a1 f0       	breq	.+40     	; 0x208 <main+0x5e>
 1e0:	28 f4       	brcc	.+10     	; 0x1ec <main+0x42>
 1e2:	88 23       	and	r24, r24
 1e4:	49 f0       	breq	.+18     	; 0x1f8 <main+0x4e>
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	b1 f4       	brne	.+44     	; 0x216 <main+0x6c>
 1ea:	08 c0       	rjmp	.+16     	; 0x1fc <main+0x52>
 1ec:	84 30       	cpi	r24, 0x04	; 4
 1ee:	61 f0       	breq	.+24     	; 0x208 <main+0x5e>
 1f0:	48 f0       	brcs	.+18     	; 0x204 <main+0x5a>
 1f2:	85 30       	cpi	r24, 0x05	; 5
 1f4:	81 f4       	brne	.+32     	; 0x216 <main+0x6c>
 1f6:	0a c0       	rjmp	.+20     	; 0x20c <main+0x62>
			{
				case 0:
				PX_writeByte( PX_GPIOB , ( 1 << 0 ) );
 1f8:	61 e0       	ldi	r22, 0x01	; 1
 1fa:	01 c0       	rjmp	.+2      	; 0x1fe <main+0x54>
				break;
				case 1:
				PX_writeByte( PX_GPIOB , ( 1 << 1 ) );
 1fc:	62 e0       	ldi	r22, 0x02	; 2
 1fe:	83 e1       	ldi	r24, 0x13	; 19
 200:	8e d0       	rcall	.+284    	; 0x31e <PX_writeByte>
				break;
 202:	09 c0       	rjmp	.+18     	; 0x216 <main+0x6c>
				case 2:
				PX_writeByte( PX_GPIOB , ( 1 << 2 ) );
				break;
				case 3:
				PX_writeByte( PX_GPIOB , ( 1 << 3 ) );
 204:	68 e0       	ldi	r22, 0x08	; 8
 206:	fb cf       	rjmp	.-10     	; 0x1fe <main+0x54>
				break;
				case 4:
				PX_writeByte( PX_GPIOB , ( 1 << 2 ) );
 208:	64 e0       	ldi	r22, 0x04	; 4
 20a:	f9 cf       	rjmp	.-14     	; 0x1fe <main+0x54>
				break;
				case 5:
				PX_writeByte( PX_GPIOB , ( 1 << 1 ) );
 20c:	62 e0       	ldi	r22, 0x02	; 2
 20e:	83 e1       	ldi	r24, 0x13	; 19
 210:	86 d0       	rcall	.+268    	; 0x31e <PX_writeByte>
				kit_light = -1;
 212:	10 93 71 00 	sts	0x0071, r17
				break;
			}
			
			kit_light++;
 216:	80 91 71 00 	lds	r24, 0x0071
 21a:	8f 5f       	subi	r24, 0xFF	; 255
 21c:	80 93 71 00 	sts	0x0071, r24
			
			tic_time_10ms = 0;
 220:	10 92 73 00 	sts	0x0073, r1
 224:	10 92 72 00 	sts	0x0072, r1
			tb_10ms_flag = 0;
 228:	10 92 76 00 	sts	0x0076, r1
		}
		
		
		if( tb_500ms_flag )
 22c:	80 91 77 00 	lds	r24, 0x0077
 230:	88 23       	and	r24, r24
 232:	71 f2       	breq	.-100    	; 0x1d0 <main+0x26>
		{
			
			PX_readToggleWrite(PX_GPIOA,(1<<7));
 234:	60 e8       	ldi	r22, 0x80	; 128
 236:	82 e1       	ldi	r24, 0x12	; 18
 238:	fe d0       	rcall	.+508    	; 0x436 <PX_readToggleWrite>
			// PX_readToggleWrite(PX_GPIOB,0xF);
						
			if (state2)
 23a:	80 91 70 00 	lds	r24, 0x0070
 23e:	88 23       	and	r24, r24
 240:	99 f0       	breq	.+38     	; 0x268 <__stack+0x9>
			{
				
				UC121902_buffer[9] = space;
 242:	10 92 69 00 	sts	0x0069, r1
				UC121902_buffer[10] = space;
 246:	10 92 6a 00 	sts	0x006A, r1
				UC121902_buffer[11] = space;
 24a:	10 92 6b 00 	sts	0x006B, r1
				UC121902_buffer[12] = space;
 24e:	10 92 6c 00 	sts	0x006C, r1
				
				UC121902_buffer[0] = B;
 252:	c0 93 60 00 	sts	0x0060, r28
				UC121902_buffer[1] = zero;
 256:	d0 93 61 00 	sts	0x0061, r29
				UC121902_buffer[2] = zero;
 25a:	d0 93 62 00 	sts	0x0062, r29
				UC121902_buffer[3] = B;
 25e:	c0 93 63 00 	sts	0x0063, r28
				state2 = 0;
 262:	10 92 70 00 	sts	0x0070, r1
 266:	13 c0       	rjmp	.+38     	; 0x28e <__stack+0x2f>
			}
			else
			{
				
				UC121902_buffer[0] = space;
 268:	10 92 60 00 	sts	0x0060, r1
				UC121902_buffer[1] = space;
 26c:	10 92 61 00 	sts	0x0061, r1
				UC121902_buffer[2] = space;
 270:	10 92 62 00 	sts	0x0062, r1
				UC121902_buffer[3] = space;
 274:	10 92 63 00 	sts	0x0063, r1
				
				UC121902_buffer[9] = B;
 278:	c0 93 69 00 	sts	0x0069, r28
				UC121902_buffer[10] = zero;
 27c:	d0 93 6a 00 	sts	0x006A, r29
				UC121902_buffer[11] = zero;
 280:	d0 93 6b 00 	sts	0x006B, r29
				UC121902_buffer[12] = B;
 284:	c0 93 6c 00 	sts	0x006C, r28
				state2 = 1;
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	80 93 70 00 	sts	0x0070, r24
			}
			
			UC121902_refresh_screen();
 28e:	2a df       	rcall	.-428    	; 0xe4 <UC121902_refresh_screen>
			
			tic_time_500ms = 0;
 290:	10 92 75 00 	sts	0x0075, r1
 294:	10 92 74 00 	sts	0x0074, r1
			tb_500ms_flag=0;
 298:	10 92 77 00 	sts	0x0077, r1
 29c:	99 cf       	rjmp	.-206    	; 0x1d0 <main+0x26>

0000029e <init_SPI>:


void init_SPI(void)
{

	PX_DDR |= ( (1<<PX_MOSI) | (1<<PX_SCK) | (1<<PX_nCS) );
 29e:	87 b3       	in	r24, 0x17	; 23
 2a0:	8d 60       	ori	r24, 0x0D	; 13
 2a2:	87 bb       	out	0x17, r24	; 23
	PX_DDR &= ~ (1<<PX_MISO);
 2a4:	b9 98       	cbi	0x17, 1	; 23
 2a6:	08 95       	ret

000002a8 <selectDevice_SPI>:
}


void selectDevice_SPI(void)
{
	clearBit(PX_PORT,PX_SCK);	//ensure that SCK is low
 2a8:	c2 98       	cbi	0x18, 2	; 24
	clearBit(PX_PORT,PX_nCS);	//pull nCS down
 2aa:	c3 98       	cbi	0x18, 3	; 24
 2ac:	08 95       	ret

000002ae <deselectDevice_SPI>:
}

void deselectDevice_SPI(void)
{
	setBit(PX_PORT,PX_nCS);			//pull nCS high
 2ae:	c3 9a       	sbi	0x18, 3	; 24
 2b0:	08 95       	ret

000002b2 <sendByte_SPI>:
}

void sendByte_SPI(unsigned char data)
{
 2b2:	27 e0       	ldi	r18, 0x07	; 7
 2b4:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char cnt = 0;
	for( cnt = 8  ; cnt > 0 ; cnt-- )
	{
		//check if bit 'cnt' in byte 'data' is high or low
		if( (1<<(cnt-1)) & data )
 2b6:	90 e0       	ldi	r25, 0x00	; 0
		else
		{
			//set MOSI to 0
			clearBit(PX_PORT,PX_MOSI);
		}
		tglBit(PX_PORT,PX_SCK);		//toggle SCK  0-->1
 2b8:	64 e0       	ldi	r22, 0x04	; 4
{
	unsigned char cnt = 0;
	for( cnt = 8  ; cnt > 0 ; cnt-- )
	{
		//check if bit 'cnt' in byte 'data' is high or low
		if( (1<<(cnt-1)) & data )
 2ba:	ac 01       	movw	r20, r24
 2bc:	02 2e       	mov	r0, r18
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <sendByte_SPI+0x12>
 2c0:	55 95       	asr	r21
 2c2:	47 95       	ror	r20
 2c4:	0a 94       	dec	r0
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <sendByte_SPI+0xe>
 2c8:	40 ff       	sbrs	r20, 0
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <sendByte_SPI+0x1e>
		{
			//set MOSI to 1
			setBit(PX_PORT,PX_MOSI);
 2cc:	c0 9a       	sbi	0x18, 0	; 24
 2ce:	01 c0       	rjmp	.+2      	; 0x2d2 <sendByte_SPI+0x20>
		}
		else
		{
			//set MOSI to 0
			clearBit(PX_PORT,PX_MOSI);
 2d0:	c0 98       	cbi	0x18, 0	; 24
		}
		tglBit(PX_PORT,PX_SCK);		//toggle SCK  0-->1
 2d2:	48 b3       	in	r20, 0x18	; 24
 2d4:	46 27       	eor	r20, r22
 2d6:	48 bb       	out	0x18, r20	; 24
		tglBit(PX_PORT,PX_SCK);		//toggle SCK  1-->0
 2d8:	48 b3       	in	r20, 0x18	; 24
 2da:	46 27       	eor	r20, r22
 2dc:	48 bb       	out	0x18, r20	; 24
 2de:	21 50       	subi	r18, 0x01	; 1
 2e0:	31 09       	sbc	r19, r1
 2e2:	58 f7       	brcc	.-42     	; 0x2ba <sendByte_SPI+0x8>
	}
}
 2e4:	08 95       	ret

000002e6 <receiveByte_SPI>:

unsigned char receiveByte_SPI(void)
{
 2e6:	27 e0       	ldi	r18, 0x07	; 7
 2e8:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char data = 0;
 2ea:	80 e0       	ldi	r24, 0x00	; 0
	unsigned char cnt = 0;
	for( cnt = 8  ; cnt > 0 ; cnt-- )
	{
		tglBit(PX_PORT,PX_SCK);			//toggle SCK  0-->1
 2ec:	e4 e0       	ldi	r30, 0x04	; 4
		{
			data |= (1<<(cnt-1));
		}
		else
		{
			data &= ~(1<<(cnt-1));
 2ee:	41 e0       	ldi	r20, 0x01	; 1
 2f0:	50 e0       	ldi	r21, 0x00	; 0
{
	unsigned char data = 0;
	unsigned char cnt = 0;
	for( cnt = 8  ; cnt > 0 ; cnt-- )
	{
		tglBit(PX_PORT,PX_SCK);			//toggle SCK  0-->1
 2f2:	98 b3       	in	r25, 0x18	; 24
 2f4:	9e 27       	eor	r25, r30
 2f6:	98 bb       	out	0x18, r25	; 24
		//check if MISO line is high or low
		if( PX_PIN & (1<<PX_MISO) )
		{
			data |= (1<<(cnt-1));
 2f8:	ba 01       	movw	r22, r20
 2fa:	02 2e       	mov	r0, r18
 2fc:	01 c0       	rjmp	.+2      	; 0x300 <receiveByte_SPI+0x1a>
 2fe:	66 0f       	add	r22, r22
 300:	0a 94       	dec	r0
 302:	ea f7       	brpl	.-6      	; 0x2fe <receiveByte_SPI+0x18>
	unsigned char cnt = 0;
	for( cnt = 8  ; cnt > 0 ; cnt-- )
	{
		tglBit(PX_PORT,PX_SCK);			//toggle SCK  0-->1
		//check if MISO line is high or low
		if( PX_PIN & (1<<PX_MISO) )
 304:	b1 9b       	sbis	0x16, 1	; 22
 306:	02 c0       	rjmp	.+4      	; 0x30c <receiveByte_SPI+0x26>
		{
			data |= (1<<(cnt-1));
 308:	86 2b       	or	r24, r22
 30a:	02 c0       	rjmp	.+4      	; 0x310 <receiveByte_SPI+0x2a>
		}
		else
		{
			data &= ~(1<<(cnt-1));
 30c:	60 95       	com	r22
 30e:	86 23       	and	r24, r22
		}
		tglBit(PX_PORT,PX_SCK);			//toggle SCK  1-->0
 310:	98 b3       	in	r25, 0x18	; 24
 312:	9e 27       	eor	r25, r30
 314:	98 bb       	out	0x18, r25	; 24
 316:	21 50       	subi	r18, 0x01	; 1
 318:	31 09       	sbc	r19, r1
 31a:	58 f7       	brcc	.-42     	; 0x2f2 <receiveByte_SPI+0xc>
	}
	return data;
}
 31c:	08 95       	ret

0000031e <PX_writeByte>:

void PX_writeByte(unsigned char reg, unsigned char val)
{
 31e:	1f 93       	push	r17
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	1f 92       	push	r1
 326:	cd b7       	in	r28, 0x3d	; 61
 328:	de b7       	in	r29, 0x3e	; 62
 32a:	18 2f       	mov	r17, r24
	selectDevice_SPI();
 32c:	69 83       	std	Y+1, r22	; 0x01
 32e:	bc df       	rcall	.-136    	; 0x2a8 <selectDevice_SPI>
	sendByte_SPI(0x40);//adress device + write mode
 330:	80 e4       	ldi	r24, 0x40	; 64
 332:	bf df       	rcall	.-130    	; 0x2b2 <sendByte_SPI>
	sendByte_SPI(reg);
 334:	81 2f       	mov	r24, r17
 336:	bd df       	rcall	.-134    	; 0x2b2 <sendByte_SPI>
	sendByte_SPI(val);
 338:	69 81       	ldd	r22, Y+1	; 0x01
 33a:	86 2f       	mov	r24, r22
 33c:	ba df       	rcall	.-140    	; 0x2b2 <sendByte_SPI>
	deselectDevice_SPI();
}
 33e:	0f 90       	pop	r0
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	1f 91       	pop	r17
{
	selectDevice_SPI();
	sendByte_SPI(0x40);//adress device + write mode
	sendByte_SPI(reg);
	sendByte_SPI(val);
	deselectDevice_SPI();
 346:	b3 cf       	rjmp	.-154    	; 0x2ae <deselectDevice_SPI>

00000348 <PX_readByte>:
}

unsigned char PX_readByte(unsigned char reg)
{
 348:	1f 93       	push	r17
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	1f 92       	push	r1
 350:	cd b7       	in	r28, 0x3d	; 61
 352:	de b7       	in	r29, 0x3e	; 62
 354:	18 2f       	mov	r17, r24
	unsigned char val=0;
	selectDevice_SPI();
 356:	a8 df       	rcall	.-176    	; 0x2a8 <selectDevice_SPI>
	sendByte_SPI(0x41);//adress device + read mode
 358:	81 e4       	ldi	r24, 0x41	; 65
 35a:	ab df       	rcall	.-170    	; 0x2b2 <sendByte_SPI>
	sendByte_SPI(reg);
 35c:	81 2f       	mov	r24, r17
 35e:	a9 df       	rcall	.-174    	; 0x2b2 <sendByte_SPI>
	val = receiveByte_SPI();
 360:	c2 df       	rcall	.-124    	; 0x2e6 <receiveByte_SPI>
	deselectDevice_SPI();
 362:	89 83       	std	Y+1, r24	; 0x01
 364:	a4 df       	rcall	.-184    	; 0x2ae <deselectDevice_SPI>
	return val;
}
 366:	89 81       	ldd	r24, Y+1	; 0x01
 368:	0f 90       	pop	r0
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	1f 91       	pop	r17
 370:	08 95       	ret

00000372 <PX_reset>:

void PX_reset( void )
{
	PX_writeByte( PX_IODIRA , 0xFF );
 372:	6f ef       	ldi	r22, 0xFF	; 255
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	d3 df       	rcall	.-90     	; 0x31e <PX_writeByte>
	PX_writeByte( PX_IODIRB , 0xFF );
 378:	6f ef       	ldi	r22, 0xFF	; 255
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	d0 df       	rcall	.-96     	; 0x31e <PX_writeByte>
	PX_writeByte( PX_IPOLA , 0x00 );
 37e:	60 e0       	ldi	r22, 0x00	; 0
 380:	82 e0       	ldi	r24, 0x02	; 2
 382:	cd df       	rcall	.-102    	; 0x31e <PX_writeByte>
	PX_writeByte( PX_IPOLB , 0x00 );
 384:	60 e0       	ldi	r22, 0x00	; 0
 386:	83 e0       	ldi	r24, 0x03	; 3
 388:	ca df       	rcall	.-108    	; 0x31e <PX_writeByte>
	PX_writeByte( PX_GPINTENA , 0x00 );
 38a:	60 e0       	ldi	r22, 0x00	; 0
 38c:	84 e0       	ldi	r24, 0x04	; 4
 38e:	c7 df       	rcall	.-114    	; 0x31e <PX_writeByte>
	PX_writeByte( PX_GPINTENB , 0x00 );
 390:	60 e0       	ldi	r22, 0x00	; 0
 392:	85 e0       	ldi	r24, 0x05	; 5
 394:	c4 df       	rcall	.-120    	; 0x31e <PX_writeByte>
	PX_writeByte( PX_DEFVALA , 0x00 );
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	86 e0       	ldi	r24, 0x06	; 6
 39a:	c1 df       	rcall	.-126    	; 0x31e <PX_writeByte>
	PX_writeByte( PX_DEFVALB , 0x00 );
 39c:	60 e0       	ldi	r22, 0x00	; 0
 39e:	87 e0       	ldi	r24, 0x07	; 7
 3a0:	be df       	rcall	.-132    	; 0x31e <PX_writeByte>
	PX_writeByte( PX_INTCONA , 0x00 );
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	88 e0       	ldi	r24, 0x08	; 8
 3a6:	bb df       	rcall	.-138    	; 0x31e <PX_writeByte>
	PX_writeByte( PX_INTCONB , 0x00 );
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	89 e0       	ldi	r24, 0x09	; 9
 3ac:	b8 df       	rcall	.-144    	; 0x31e <PX_writeByte>
	PX_writeByte( PX_IOCON , 0x00 );
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	8a e0       	ldi	r24, 0x0A	; 10
 3b2:	b5 df       	rcall	.-150    	; 0x31e <PX_writeByte>
	PX_writeByte( PX_GPPUA , 0x00 );
 3b4:	60 e0       	ldi	r22, 0x00	; 0
 3b6:	8c e0       	ldi	r24, 0x0C	; 12
 3b8:	b2 df       	rcall	.-156    	; 0x31e <PX_writeByte>
	PX_writeByte( PX_GPPUB , 0x00 );
 3ba:	60 e0       	ldi	r22, 0x00	; 0
 3bc:	8d e0       	ldi	r24, 0x0D	; 13
 3be:	af df       	rcall	.-162    	; 0x31e <PX_writeByte>
	PX_writeByte( PX_INTFA , 0x00 );
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	8e e0       	ldi	r24, 0x0E	; 14
 3c4:	ac df       	rcall	.-168    	; 0x31e <PX_writeByte>
	PX_writeByte( PX_INTFB , 0x00 );
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	8f e0       	ldi	r24, 0x0F	; 15
 3ca:	a9 df       	rcall	.-174    	; 0x31e <PX_writeByte>
	PX_writeByte( PX_INTCAPA , 0x00 );
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	80 e1       	ldi	r24, 0x10	; 16
 3d0:	a6 df       	rcall	.-180    	; 0x31e <PX_writeByte>
	PX_writeByte( PX_INTCAPB , 0x00 );
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	81 e1       	ldi	r24, 0x11	; 17
 3d6:	a3 df       	rcall	.-186    	; 0x31e <PX_writeByte>
	PX_writeByte( PX_GPIOA , 0x00 );
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	82 e1       	ldi	r24, 0x12	; 18
 3dc:	a0 df       	rcall	.-192    	; 0x31e <PX_writeByte>
	PX_writeByte( PX_GPIOB , 0x00 );
 3de:	60 e0       	ldi	r22, 0x00	; 0
 3e0:	83 e1       	ldi	r24, 0x13	; 19
 3e2:	9d df       	rcall	.-198    	; 0x31e <PX_writeByte>
	PX_writeByte( PX_OLATA , 0x00 );
 3e4:	60 e0       	ldi	r22, 0x00	; 0
 3e6:	84 e1       	ldi	r24, 0x14	; 20
 3e8:	9a df       	rcall	.-204    	; 0x31e <PX_writeByte>
	PX_writeByte( PX_OLATB , 0x00 );
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	85 e1       	ldi	r24, 0x15	; 21
 3ee:	97 cf       	rjmp	.-210    	; 0x31e <PX_writeByte>

000003f0 <PX_readSetWrite>:




void PX_readSetWrite(unsigned char reg, unsigned char mask)
{
 3f0:	1f 93       	push	r17
 3f2:	cf 93       	push	r28
 3f4:	df 93       	push	r29
 3f6:	1f 92       	push	r1
 3f8:	cd b7       	in	r28, 0x3d	; 61
 3fa:	de b7       	in	r29, 0x3e	; 62
 3fc:	18 2f       	mov	r17, r24
	unsigned char tmp;
	tmp = PX_readByte(reg);
 3fe:	69 83       	std	Y+1, r22	; 0x01
 400:	a3 df       	rcall	.-186    	; 0x348 <PX_readByte>
	tmp |= mask;
 402:	69 81       	ldd	r22, Y+1	; 0x01
 404:	68 2b       	or	r22, r24
	PX_writeByte(reg,tmp);
 406:	81 2f       	mov	r24, r17
}
 408:	0f 90       	pop	r0
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	1f 91       	pop	r17
void PX_readSetWrite(unsigned char reg, unsigned char mask)
{
	unsigned char tmp;
	tmp = PX_readByte(reg);
	tmp |= mask;
	PX_writeByte(reg,tmp);
 410:	86 cf       	rjmp	.-244    	; 0x31e <PX_writeByte>

00000412 <PX_readClearWrite>:
}

void PX_readClearWrite(unsigned char reg, unsigned char mask)
{
 412:	1f 93       	push	r17
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	1f 92       	push	r1
 41a:	cd b7       	in	r28, 0x3d	; 61
 41c:	de b7       	in	r29, 0x3e	; 62
 41e:	18 2f       	mov	r17, r24
	unsigned char tmp;
	tmp = PX_readByte(reg);
 420:	69 83       	std	Y+1, r22	; 0x01
 422:	92 df       	rcall	.-220    	; 0x348 <PX_readByte>
	tmp &= ~mask;
 424:	69 81       	ldd	r22, Y+1	; 0x01
 426:	60 95       	com	r22
 428:	68 23       	and	r22, r24
	PX_writeByte(reg,tmp);
 42a:	81 2f       	mov	r24, r17
}
 42c:	0f 90       	pop	r0
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	1f 91       	pop	r17
void PX_readClearWrite(unsigned char reg, unsigned char mask)
{
	unsigned char tmp;
	tmp = PX_readByte(reg);
	tmp &= ~mask;
	PX_writeByte(reg,tmp);
 434:	74 cf       	rjmp	.-280    	; 0x31e <PX_writeByte>

00000436 <PX_readToggleWrite>:
}

void PX_readToggleWrite(unsigned char reg, unsigned char mask)
{
 436:	1f 93       	push	r17
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	1f 92       	push	r1
 43e:	cd b7       	in	r28, 0x3d	; 61
 440:	de b7       	in	r29, 0x3e	; 62
 442:	18 2f       	mov	r17, r24
	unsigned char tmp;
	tmp = PX_readByte(reg);
 444:	69 83       	std	Y+1, r22	; 0x01
 446:	80 df       	rcall	.-256    	; 0x348 <PX_readByte>
	tmp ^= mask;
 448:	69 81       	ldd	r22, Y+1	; 0x01
 44a:	68 27       	eor	r22, r24
	PX_writeByte(reg,tmp);
 44c:	81 2f       	mov	r24, r17
 44e:	0f 90       	pop	r0
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	1f 91       	pop	r17
void PX_readToggleWrite(unsigned char reg, unsigned char mask)
{
	unsigned char tmp;
	tmp = PX_readByte(reg);
	tmp ^= mask;
	PX_writeByte(reg,tmp);
 456:	63 cf       	rjmp	.-314    	; 0x31e <PX_writeByte>

00000458 <_exit>:
 458:	f8 94       	cli

0000045a <__stop_program>:
 45a:	ff cf       	rjmp	.-2      	; 0x45a <__stop_program>
